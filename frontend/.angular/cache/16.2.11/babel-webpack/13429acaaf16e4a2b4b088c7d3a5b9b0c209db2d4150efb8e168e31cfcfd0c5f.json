{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  constructor(taskService, route, router) {\n    this.taskService = taskService;\n    this.route = route;\n    this.router = router;\n    this.lists = [];\n    this.tasks = [];\n    this.listId = \"\";\n  }\n  ngOnInit() {\n    this.taskService.getLists().subscribe(lists => this.lists = lists);\n    this.route.params.subscribe(params => {\n      this.listId = params['listId'];\n      if (!this.listId) return;\n      this.taskService.getTasks(this.listId).subscribe(tasks => this.tasks = tasks);\n    });\n  }\n  onTaskClick(task) {\n    this.taskService.setCompleted(this.listId, task).subscribe(() => task.completed = !task.completed);\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"names":["Component","DashboardComponent","constructor","taskService","route","router","lists","tasks","listId","ngOnInit","getLists","subscribe","params","getTasks","onTaskClick","task","setCompleted","completed","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Programming\\Full_Stack\\Angular\\To-Do-App\\frontend\\src\\app\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  lists: List[] = [];\n  tasks: Task[] = [];\n  listId: string = \"\";\n\n  constructor(\n    private taskService: TaskService,\n    private route: ActivatedRoute,\n    private router: Router) { };\n\n  ngOnInit(): void {\n    this.taskService.getLists()\n      .subscribe((lists: any) => this.lists = lists);\n\n    this.route.params.subscribe((params: Params) => {\n      this.listId = params['listId'];\n      if (!this.listId) return;\n      this.taskService.getTasks(this.listId).subscribe((tasks: any) => this.tasks = tasks);\n    })\n  }\n\n  onTaskClick(task: any) {\n    this.taskService.setCompleted(this.listId, task).subscribe(\n      () => task.completed = !task.completed\n    );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOzC,IAAaC,kBAAkB,GAA/B,MAAaA,kBAAkB;EAK7BC,YACUC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc;IAFd,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IAPhB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,MAAM,GAAW,EAAE;EAKS;EAE5BC,QAAQA,CAAA;IACN,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE,CACxBC,SAAS,CAAEL,KAAU,IAAK,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC;IAEhD,IAAI,CAACF,KAAK,CAACQ,MAAM,CAACD,SAAS,CAAEC,MAAc,IAAI;MAC7C,IAAI,CAACJ,MAAM,GAAGI,MAAM,CAAC,QAAQ,CAAC;MAC9B,IAAI,CAAC,IAAI,CAACJ,MAAM,EAAE;MAClB,IAAI,CAACL,WAAW,CAACU,QAAQ,CAAC,IAAI,CAACL,MAAM,CAAC,CAACG,SAAS,CAAEJ,KAAU,IAAK,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC;IACtF,CAAC,CAAC;EACJ;EAEAO,WAAWA,CAACC,IAAS;IACnB,IAAI,CAACZ,WAAW,CAACa,YAAY,CAAC,IAAI,CAACR,MAAM,EAAEO,IAAI,CAAC,CAACJ,SAAS,CACxD,MAAMI,IAAI,CAACE,SAAS,GAAG,CAACF,IAAI,CAACE,SAAS,CACvC;EACH;CACD;AA1BYhB,kBAAkB,GAAAiB,UAAA,EAL9BlB,SAAS,CAAC;EACTmB,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWpB,kBAAkB,CA0B9B;SA1BYA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}